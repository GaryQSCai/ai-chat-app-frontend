{"ast":null,"code":"// frontend/src/services/api.js\n\nimport axios from 'axios';\nimport authService from './authService';\nconst API_BASE_URL = 'http://localhost:8000'; // Adjust if your backend is running on a different port or URL\n\n// Create axios instance with auth header\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add auth header interceptor\napi.interceptors.request.use(config => {\n  const token = authService.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add interceptor for handling auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    authService.logout();\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const sendChatMessage = async (text, service, sessionId = null) => {\n  const token = authService.getToken();\n  if (!token) {\n    throw new Error('No authentication token found');\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        text,\n        service,\n        session_id: sessionId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to get AI response');\n    }\n    return response;\n  } catch (error) {\n    console.error('Error in sendChatMessage:', error);\n    throw error;\n  }\n};\n\n// Add export for fetchSessionHistory\nexport const fetchSessionHistory = async () => {\n  try {\n    const response = await api.get('/sessions/');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching session history:', error);\n    throw error;\n  }\n};\n\n// Add export for deleteSession\nexport const deleteSession = async sessionId => {\n  try {\n    const response = await api.delete(`/sessions/${sessionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting session:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","authService","API_BASE_URL","api","create","baseURL","interceptors","request","use","config","token","getToken","headers","Authorization","response","error","_error$response","status","logout","window","location","href","Promise","reject","sendChatMessage","text","service","sessionId","Error","fetch","method","body","JSON","stringify","session_id","ok","errorData","json","detail","console","fetchSessionHistory","get","data","deleteSession","delete"],"sources":["/Users/garycai/Documents/Git Repository/ai-chat-app/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\n\nimport axios from 'axios';\nimport authService from './authService';\n\nconst API_BASE_URL = 'http://localhost:8000'; // Adjust if your backend is running on a different port or URL\n\n// Create axios instance with auth header\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n});\n\n// Add auth header interceptor\napi.interceptors.request.use((config) => {\n    const token = authService.getToken();\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n\n// Add interceptor for handling auth errors\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response?.status === 401) {\n            authService.logout();\n            window.location.href = '/login';\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport const sendChatMessage = async (text, service, sessionId = null) => {\n    const token = authService.getToken();\n    if (!token) {\n        throw new Error('No authentication token found');\n    }\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/chat`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                text,\n                service,\n                session_id: sessionId\n            })\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.detail || 'Failed to get AI response');\n        }\n\n        return response;\n    } catch (error) {\n        console.error('Error in sendChatMessage:', error);\n        throw error;\n    }\n};\n\n// Add export for fetchSessionHistory\nexport const fetchSessionHistory = async () => {\n    try {\n        const response = await api.get('/sessions/');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching session history:', error);\n        throw error;\n    }\n};\n\n// Add export for deleteSession\nexport const deleteSession = async (sessionId) => {\n    try {\n        const response = await api.delete(`/sessions/${sessionId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error deleting session:', error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}